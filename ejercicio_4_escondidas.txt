enum RolesJuegoEscondidas{
    case contando
    case buscando_jugadores
    case buscando_escondite
    case escondido
    case regresando_a_base
    case encontrado
    case cantar_victoria
    case suspendido
}

protocol JugadorDeEscondidas: class{
    var rol: RolesJuegoEscondidas { get set }
    var compañeros_de_juego: [JugadorDeEscondidas] { get set }
    var nombre: String {get set}
    var lugar_actual: UbicacionFisica? {get set}
    var visibilidad: Double {get set}
    func actualizar() -> Bool
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool
    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool
}

extension JugadorDeEscondidas {
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool {
        switch(self.rol){
            case .suspendido: 
                self.rol = rol_nuevo
                return true
            case .cantar_victoria, .encontrado: 
                if rol_nuevo == .suspendido {
                    self.rol = rol_nuevo
                    return true
                }
                return false
            default: 
                return false
        }
    }
}

struct Ubicacion2Dimensiones{
    var x: Int
    var y: Int 
    init(_ x: Int, _ y: Int){
        self.x = x
        self.y = y
    }
}

class UbicacionFisica{
    var nombre: String
    var lugares_cercanos: [UbicacionFisica]
    init(_ nombre: String){
        self.nombre = nombre
        self.lugares_cercanos = []
    }
    func agregar_lugar(_ lugar: UbicacionFisica) -> Bool{
        for ubicacion in lugares_cercanos{
            if ubicacion.nombre == lugar.nombre{
                return false
            }
        }
        lugar.lugares_cercanos.append(self)
        self.lugares_cercanos.append(lugar)
        return true
    }
}

class Personaje {
    var nombre: String
    var ubicacion: UbicacionFisica?
    init(_ nombre: String){
        self.nombre = nombre
        self.ubicacion = nil
    }
    func establecer_ubicacion(_ nueva_ubicacion: UbicacionFisica) -> Bool{
        if ubicacion == nil{
            self.ubicacion = nueva_ubicacion
            return true
        }
        if ubicacion!.nombre == nueva_ubicacion.nombre{
            return false
        }
        ubicacion = nueva_ubicacion
        return true
    }
}

class PersonajeJugable: Personaje, JugadorDeEscondidas{
    var visibilidad: Double
    var rol: RolesJuegoEscondidas = .suspendido
    var lugar_actual: UbicacionFisica?
    var numero_contado: Int
    var compañeros_de_juego: [JugadorDeEscondidas] = []

    init(_ nombre: String, visibilidad: Double){
        self.visibilidad = visibilidad
        numero_contado = 0
        super.init(nombre)
        lugar_actual = nil
    }

    func actualizar() -> Bool{
        switch(rol){
            case .contando:
                self.contar_para_buscar()
            case .buscando_jugadores:
                self.moverse_de_lugar()
                self.identificar_jugadores()
            case .buscando_escondite:
                self.moverse_de_lugar()
                let quedarse_quieto = Int.random(in: 0...10)
                if quedarse_quieto % 5 == 0{
                    self.rol = .escondido
                }
            case .cantar_victoria:
                print("Yo, \(nombre), he ganado")
            case .suspendido:
                print("Yo, \(nombre), he perdido")
            default:
                print("TODO")
        }
        return false
    }

    func identificar_jugadores(){
        for compañero in compañeros_de_juego{
            if compañero.lugar_actual!.nombre == self.lugar_actual!.nombre{
                let probabilidad_de_encontrar = Int((1.0 - compañero.visibilidad) * 100)
                let suerte = Int.random(in: 0...100)
                if suerte > probabilidad_de_encontrar{
                    compañero.rol = .encontrado
                    print("He encontrado a \(compañero.nombre)")
                }
            }
        }
    }

    func moverse_de_lugar(){
        let indice_de_nuevo_lugar = Int.random(
            in: 0..<lugar_actual!.lugares_cercanos.count
        )
        let nuevo_lugar = lugar_actual!.lugares_cercanos[indice_de_nuevo_lugar]
        let deberia_de_cambiar = Int.random(in: 0...10)
        if deberia_de_cambiar % 2 == 0 {
            cambiar_de_lugar_a(nuevo_lugar)
        }
    }

    func contar_para_buscar(){
        numero_contado += 1
        print("Soy \(nombre) y voy en el \(numero_contado)")
        if numero_contado > 10{
            self.rol = .buscando_jugadores
        }
    }

    func cambiar_de_lugar_a(_ ubicacion: UbicacionFisica) -> Bool{
        if self.lugar_actual == nil {
            self.lugar_actual = ubicacion
            return true 
        }
        if ubicacion.nombre == self.lugar_actual!.nombre{
            return false
        }
        lugar_actual = ubicacion
        return true
    }

    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool{
        if compañero_nuevo.nombre == self.nombre{
            return false
        }
        for compañero in compañeros_de_juego{
            if compañero.nombre == compañero_nuevo.nombre{
                return false
            }
        }
        compañeros_de_juego.append(compañero_nuevo)
        return true
    }
}

func iniciar_juego(jugadores: [JugadorDeEscondidas]) {
    let numero_del_jugador_que_busca = Int.random(in: 0..<jugadores.count)
    let jugador_que_busca: JugadorDeEscondidas = jugadores[numero_del_jugador_que_busca]
    jugador_que_busca.establecer_rol(.contando)
    for jugador in jugadores {
        jugador_que_busca.agregar_compañero(jugador)
        if jugador.rol == .suspendido{
            jugador.establecer_rol(.buscando_escondite)
        }
    }
}

// ubicaciones
let punto_de_inicio = Ubicacion2Dimensiones(1, 3)

var jugadores: [PersonajeJugable] = []
jugadores.append(PersonajeJugable("Pepito Bananas", visibilidad: 0.5))
jugadores.append(PersonajeJugable("Wally", visibilidad: 0.1))
jugadores.append(PersonajeJugable("Chuchito", visibilidad: 0.2))
jugadores.append(PersonajeJugable("Anabelle", visibilidad: 0.9))

let loby = UbicacionFisica("Loby")
let oficina = UbicacionFisica("Oficina")
let sala_de_estar = UbicacionFisica("Sala de estar")
let salon = UbicacionFisica("Salon")
let baños = UbicacionFisica("Baños")
let patio = UbicacionFisica("Patio")
let cocina = UbicacionFisica("Cocina")

loby.agregar_lugar(sala_de_estar)
loby.agregar_lugar(salon)
loby.agregar_lugar(oficina)
sala_de_estar.agregar_lugar(baños)
salon.agregar_lugar(baños)
patio.agregar_lugar(cocina)
cocina.agregar_lugar(sala_de_estar)
patio.agregar_lugar(loby)

var ubicaciones_juego: [UbicacionFisica] = []
ubicaciones_juego.append(loby)

iniciar_juego(jugadores: jugadores)

for jugador in jugadores{
    jugador.cambiar_de_lugar_a(loby)
}

var ciclo_actual = 0
while true {
    for jugador in jugadores{
        jugador.actualizar()
    }
    for jugador in jugadores{
        print("El rol de \(jugador.nombre) es \(jugador.rol)")
        print("Estoy en: \(jugador.lugar_actual?.nombre ?? "No se")")
        print("Mis compañeros son: \(jugador.compañeros_de_juego.count)")
    }
    print("")
    ciclo_actual += 1 

    var encontrados = 0
    var escondidos = 0
    var buscador: JugadorDeEscondidas? = nil

    for jugador in jugadores{
        if jugador.rol == .encontrado{
            encontrados += 1
        }
        if jugador.rol == .escondido{
            escondidos += 1
        }
        if jugador.rol == .contando || jugador.rol == .buscando_jugadores{
            buscador = jugador
        }
    }

    if encontrados == jugadores.count - 1{
        if buscador != nil{
            buscador!.establecer_rol(.cantar_victoria)
            print("El ganador es \(buscador!.nombre), encontró a todos los jugadores")
        }
        break
    }

    if ciclo_actual > 25 && escondidos > 0{
        print("Los escondidos han ganado")
        for jugador in jugadores{
            if jugador.rol == .escondido{
                jugador.establecer_rol(.cantar_victoria)
                print("El ganador es \(jugador.nombre), logró esconderse hasta el final")
            }
        }
        break
    }
}

//cantar victoria y agregar lugares
